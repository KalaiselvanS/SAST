### Issue parse filters allow you to control which issues are loaded into memory, and which are
### ignored.  They are typically used with large fprs that would otherwise yield out of memory
### errors.  Issue parse filters prevent certain types of issues from showing up at all, which
### is not always ideal.  Alternate solutions include allocating more memory to the appliation
### (using environment variables like USER_VM_OPTS or AWB_VM_OPTS), running the 64-bit version
### of the product (which allows you to allocate more memory than the 32-bit version), and
### persisting data to disk with "com.fortify.model.PersistDataToDisk=true".  See the AWB User
### Guide for details.
###
### In order to use issue parse filters, you must set "com.fortify.model.UseIssueParseFilters=true".
### An easy way to do this is to uncomment that line in fortify.properties.
###
### For the filters below, parseDepth represents the strategy that should be employed when an
### issue fails to meet the filter condition.  Acceptable values include SKIP (do not load any
### information related to the issue), NO_TRACE (do not load any of the analysis evidence for
### the issue), and FULL (load normally).
###
### For the category and analyzer filters, you can specify both a whitelist and a blacklist.
### The whitelist represents issues that should be loaded, and the blacklist represents issues
### that should not.  Multiple values should be separated by commas with no spaces in between
### (see examples below)
###
### For the severity and confidence filters, you can specify both a minimimum and maximum cutoff.
### With the minimum, issues with values below that cutoff will not be loaded.  With the maximum,
### issues with values above that cutoff will not be loaded.
###
### When multiple filters are included, they are combined together as an "and".  For instance,
### if you have a category filter with a white list of "SQL Injection", and an analyzer filter
### with a white list of "dataflow", you will only see SQL Injection issues from the data flow
### analyzer.  If an issue fails to satisy more than one filter, then the lowest parse depth
### will be used (where SKIP is lower than NO_TRACE, and NO_TRACE is lower than FULL).


## The category-based filter allows you to filter by type and subtype.  When a subtype is used,
## there should be a ": " separating it from the type (for example, access Control: database).
## Categories also accept * wildcard, for instance you can specify: Cross-Site Scripting*.
## Multiple values should be separated by commas without spaces, for instance:
##   category.whitelist=sql injection,password management: hardcoded password

#category.parseDepth=SKIP
#category.whitelist=
#category.blacklist=

## The analyzer-based filter allows you to filter by analyzer.  Possible values include dataflow,
## controlflow, semantic, structural, configuration, content, findbugs, buffer, tracerintegration,
## and nullptr.  Multiple values should be separated by commas without spaces, for instance:
##   analyzer.whitelist=dataflow,controlflow

#analyzer.parseDepth=SKIP
#analyzer.whitelist=
#analyzer.blacklist=controlflow

## The severity-based filter allows you to filter by severity.  If a minimum cutoff is used,
## issues with a severity value lower than the cutoff will not be included.  If a maximum
## cutoff is used, issues with a severity value higher than the cutoff will not be included.

#severity.parseDepth=SKIP
#severity.minimum.cutoff=3.0
#severity.maximum.cutoff=4.0

## The confidence-based filter allows you to filter by confidence.  If a minimum cutoff is used,
## issues with a confidence value lower than the cutoff will not be included.  If a maximum
## cutoff is used, issues with a confidence value higher than the cutoff will not be included.

#confidence.parseDepth=SKIP
#confidence.minimum.cutoff=3.0
#confidence.maximum.cutoff=
